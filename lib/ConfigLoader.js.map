{"version":3,"file":"ConfigLoader.js","names":["_july","require","_JsonConfigProvider","_interopRequireDefault","_EnvAwareConfigProviderF","_defaultSyntax","obj","__esModule","default","EnvAwareJsonConfigProvider","EnvAwareConfigProviderF","JsonConfigProvider","ConfigLoader","createEnvAwareJsonLoader","configDir","baseName","envFlag","logger","postProcessors","constructor","configProvider","provider","data","undefined","autoPostProcess","_","defaultsDeep","defaultSyntax","load_","variables","oldData","reload_","defaults","postProcess","queue","_l","prefix","length","$this","interpolateElement","coll","key","val","_tryProcessStringValue","isPlainObject","isArray","push","offset","node","forOwn","value","l","i","strVal","startsWith","colonPos","indexOf","token","substring","operator","processors","substr","Error","_default","exports","module"],"sources":["../src/ConfigLoader.js"],"sourcesContent":["import { _ } from '@genx/july';\n\nimport JsonConfigProvider from './JsonConfigProvider.js';\nimport EnvAwareConfigProviderF from './EnvAwareConfigProviderF.js';\n\nimport defaultSyntax from './defaultSyntax';\n\nconst EnvAwareJsonConfigProvider = EnvAwareConfigProviderF(\n    '.json',\n    JsonConfigProvider\n);\n\nclass ConfigLoader {\n    /**\n     * Create an environment aware JSON config loader\n     * @param {string} configDir\n     * @param {string} baseName\n     * @param {string} envFlag\n     * @param {Logger} logger\n     * @param {object} postProcessors\n     */\n    static createEnvAwareJsonLoader(\n        configDir,\n        baseName,\n        envFlag,\n        logger,\n        postProcessors\n    ) {\n        return new ConfigLoader(\n            new EnvAwareJsonConfigProvider(configDir, baseName, envFlag),\n            logger,\n            postProcessors\n        );\n    }\n\n    /**\n     * The config loader\n     * @constructs ConfigLoader\n     * @extends EventEmitter\n     * @example\n     *   let fileSource = new JsonConfigProvider('path/to/config.json');\n     *   let config = new ConfigLoader(fileSource);\n     *   await config.load_()...;\n     *\n     *   let dbSource = new DbConfigProvider(config.data.dbConnection);\n     *   config.provider = dbSource;\n     *   await config.reload_()...;\n     *\n     *   // same as: let envAwareLoader = new ConfigLoader(\n     *   //    new (EnvAwareConfigProviderF('.json', JsonConfigProvider, 'default'))('config/dir', 'app', 'production')\n     *   // );\n     *   let envAwareLoader = ConfigLoader.createEnvAwareJsonLoader('config/dir', 'app', 'production');\n     *\n     *   // Loader will load config/dir/app.default.json first,\n     *   // and then load config/dir/app.production.json,\n     *   // and finally override the default.\n     *   let cfg = await envAwareLoader.load_();\n     */\n    constructor(configProvider, logger, postProcessors) {\n        /**\n         * The config data source provider\n         * @type {object}\n         * @public\n         **/\n        this.provider = configProvider;\n\n        /**\n         * The config data\n         * @type {object}\n         * @public\n         **/\n        this.data = undefined;\n\n        /**\n         * Whether to do string post process automatically after loading\n         * @type {boolean}\n         * @public\n         */\n        this.autoPostProcess = true;\n\n        /**\n         * Logger with log(level, message, meta) function.\n         * @type {Logger}\n         * @public\n         */\n        this.logger = logger;\n\n        /**\n         * Post processors\n         * @private\n         */\n        this.postProcessors =\n            postProcessors != null\n                ? _.defaultsDeep(postProcessors, defaultSyntax)\n                : defaultSyntax;\n    }\n\n    /**\n     * Start loading the config files and override existing\n     * @param {object} variables - variables\n     * @returns {Promise.<object>}\n     */\n    async load_(variables) {\n        const oldData = this.data;\n\n        await this.reload_(variables);\n\n        if (oldData) {\n            this.data = _.defaults(this.data, oldData);\n        }\n\n        return this.data;\n    }\n\n    /**\n     * Reload config\n     * @returns {Promise.<object>}\n     */\n    async reload_(variables) {\n        this.data = await this.provider.load_(this.logger);\n        if (this.autoPostProcess) this.postProcess(variables);\n\n        return this.data;\n    }\n\n    /**\n     * PostProcess the loaded config\n     * @param {object} variables - variables\n     */\n    postProcess(variables) {\n        const queue = [this.data];\n\n        this._l = this.postProcessors.prefix.length;\n\n        variables = { ...variables, $this: this.data };\n\n        const interpolateElement = (coll, key, val) => {\n            if (typeof val === 'string') {\n                coll[key] = this._tryProcessStringValue(val, variables);\n            } else if (_.isPlainObject(val) || _.isArray(val)) {\n                queue.push(val);\n            }\n        };\n\n        let offset = 0;\n\n        while (queue.length > offset) {\n            const node = queue[offset];\n\n            if (_.isPlainObject(node)) {\n                _.forOwn(node, (value, key) => {\n                    interpolateElement(node, key, value);\n                });\n            } else {\n                const l = node.length;\n                for (let i = 0; i < l; i++) {\n                    interpolateElement(node, i, node[i]);\n                }\n            }\n\n            offset++;\n        }\n    }\n\n    _tryProcessStringValue(strVal, variables) {\n        if (strVal.startsWith(this.postProcessors.prefix)) {\n            const colonPos = strVal.indexOf(':');\n            if (colonPos > this._l) {\n                const token = strVal.substring(this._l, colonPos);\n                const operator = this.postProcessors.processors[token];\n                if (operator) {\n                    return operator(strVal.substr(colonPos + 1), variables);\n                }\n\n                throw new Error('Unsupported post processor: ' + token);\n            }\n\n            throw new Error('Invalid post processor syntax: ' + strVal);\n        }\n\n        return strVal;\n    }\n}\n\nexport default ConfigLoader;\n"],"mappings":"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"}