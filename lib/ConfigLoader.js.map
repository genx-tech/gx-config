{"version":3,"sources":["../src/ConfigLoader.js"],"names":["vm","require","_","quote","JsonConfigProvider","EnvAwareConfigProviderF","EnvAwareJsonConfigProvider","JS_VALUE_TOKEN","JS_TEMPLATE_TOKEN","PROCESSOR_PREFIX","PrefixMap","Map","set","strVal","variables","runInNewContext","ConfigLoader","createEnvAwareJsonLoader","configDir","baseName","envFlag","logger","constructor","configProvider","provider","data","undefined","autoPostProcess","load_","oldData","reload_","defaults","postProcess","queue","$this","interpolateElement","coll","key","val","_tryProcessStringValue","isPlainObject","isArray","push","offset","length","node","hasOwnProperty","l","i","startsWith","colon","indexOf","token","substring","operator","get","substr","Error","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAM;AAAEC,EAAAA,CAAF;AAAKC,EAAAA;AAAL,IAAeF,OAAO,CAAC,YAAD,CAA5B;;AAEA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,yBAAD,CAAlC;;AACA,MAAMI,uBAAuB,GAAGJ,OAAO,CAAC,8BAAD,CAAvC;;AACA,MAAMK,0BAA0B,GAAGD,uBAAuB,CACtD,OADsD,EAEtDD,kBAFsD,CAA1D;AAKA,MAAMG,cAAc,GAAG,KAAvB;AACA,MAAMC,iBAAiB,GAAG,KAA1B;AACA,MAAMC,gBAAgB,GAAG,IAAzB;AAEA,MAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AACAD,SAAS,CAACE,GAAV,CAAcL,cAAd,EAA8B,CAACM,MAAD,EAASC,SAAT,KAC1Bd,EAAE,CAACe,eAAH,CAAmB,YAAYF,MAAZ,GAAqB,GAAxC,EAA6CC,SAA7C,GADJ;AAGAJ,SAAS,CAACE,GAAV,CAAcJ,iBAAd,EAAiC,CAACK,MAAD,EAASC,SAAT,KAC7Bd,EAAE,CAACe,eAAH,CAAmBZ,KAAK,CAACU,MAAD,EAAS,GAAT,CAAxB,EAAuCC,SAAvC,CADJ;;AAIA,MAAME,YAAN,CAAmB;AAOgB,SAAxBC,wBAAwB,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,OAAtB,EAA+BC,MAA/B,EAAuC;AAClE,WAAO,IAAIL,YAAJ,CACH,IAAIV,0BAAJ,CAA+BY,SAA/B,EAA0CC,QAA1C,EAAoDC,OAApD,CADG,EAEHC,MAFG,CAAP;AAIH;;AAyBDC,EAAAA,WAAW,CAACC,cAAD,EAAiBF,MAAjB,EAAyB;AAMhC,SAAKG,QAAL,GAAgBD,cAAhB;AAOA,SAAKE,IAAL,GAAYC,SAAZ;AAOA,SAAKC,eAAL,GAAuB,IAAvB;AAOA,SAAKN,MAAL,GAAcA,MAAd;AACH;;AAOU,QAALO,KAAK,CAACd,SAAD,EAAY;AACnB,QAAIe,OAAO,GAAG,KAAKJ,IAAnB;AAEA,UAAM,KAAKK,OAAL,CAAahB,SAAb,CAAN;;AAEA,QAAIe,OAAJ,EAAa;AACT,WAAKJ,IAAL,GAAYvB,CAAC,CAAC6B,QAAF,CAAW,KAAKN,IAAhB,EAAsBI,OAAtB,CAAZ;AACH;;AAED,WAAO,KAAKJ,IAAZ;AACH;;AAMY,QAAPK,OAAO,CAAChB,SAAD,EAAY;AACrB,SAAKW,IAAL,GAAY,MAAM,KAAKD,QAAL,CAAcI,KAAd,CAAoB,KAAKP,MAAzB,CAAlB;AACA,QAAI,KAAKM,eAAT,EAA0B,KAAKK,WAAL,CAAiBlB,SAAjB;AAE1B,WAAO,KAAKW,IAAZ;AACH;;AAMDO,EAAAA,WAAW,CAAClB,SAAD,EAAY;AACnB,QAAImB,KAAK,GAAG,CAAC,KAAKR,IAAN,CAAZ;AAEAX,IAAAA,SAAS,GAAG,EAAE,GAAGA,SAAL;AAAgBoB,MAAAA,KAAK,EAAE,KAAKT;AAA5B,KAAZ;;AAEA,QAAIU,kBAAkB,GAAG,CAACC,IAAD,EAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACzC,UAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzBF,QAAAA,IAAI,CAACC,GAAD,CAAJ,GAAY,KAAKE,sBAAL,CAA4BD,GAA5B,EAAiCxB,SAAjC,CAAZ;AACH,OAFD,MAEO,IAAIZ,CAAC,CAACsC,aAAF,CAAgBF,GAAhB,KAAwBpC,CAAC,CAACuC,OAAF,CAAUH,GAAV,CAA5B,EAA4C;AAC/CL,QAAAA,KAAK,CAACS,IAAN,CAAWJ,GAAX;AACH;AACJ,KAND;;AAQA,QAAIK,MAAM,GAAG,CAAb;;AAEA,WAAOV,KAAK,CAACW,MAAN,GAAeD,MAAtB,EAA8B;AAC1B,UAAIE,IAAI,GAAGZ,KAAK,CAACU,MAAD,CAAhB;;AAEA,UAAIzC,CAAC,CAACsC,aAAF,CAAgBK,IAAhB,CAAJ,EAA2B;AACvB,aAAK,IAAIR,GAAT,IAAgBQ,IAAhB,EAAsB;AAClB,cAAIA,IAAI,CAACC,cAAL,CAAoBT,GAApB,CAAJ,EAA8B;AAC1BF,YAAAA,kBAAkB,CAACU,IAAD,EAAOR,GAAP,EAAYQ,IAAI,CAACR,GAAD,CAAhB,CAAlB;AACH;AACJ;AACJ,OAND,MAMO;AACH,YAAIU,CAAC,GAAGF,IAAI,CAACD,MAAb;;AACA,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,CAApB,EAAuBC,CAAC,EAAxB,EAA4B;AACxBb,UAAAA,kBAAkB,CAACU,IAAD,EAAOG,CAAP,EAAUH,IAAI,CAACG,CAAD,CAAd,CAAlB;AACH;AACJ;;AAEDL,MAAAA,MAAM;AACT;AACJ;;AAEDJ,EAAAA,sBAAsB,CAAC1B,MAAD,EAASC,SAAT,EAAoB;AACtC,QAAID,MAAM,CAACoC,UAAP,CAAkBxC,gBAAlB,CAAJ,EAAyC;AACrC,UAAIyC,KAAK,GAAGrC,MAAM,CAACsC,OAAP,CAAe,GAAf,CAAZ;;AACA,UAAID,KAAK,GAAG,CAAZ,EAAe;AACX,YAAIE,KAAK,GAAGvC,MAAM,CAACwC,SAAP,CAAiB,CAAjB,EAAoBH,KAApB,CAAZ;AACA,YAAII,QAAQ,GAAG5C,SAAS,CAAC6C,GAAV,CAAcH,KAAd,CAAf;;AACA,YAAIE,QAAJ,EAAc;AACV,iBAAOA,QAAQ,CAACzC,MAAM,CAAC2C,MAAP,CAAcN,KAAK,GAAG,CAAtB,CAAD,EAA2BpC,SAA3B,CAAf;AACH;;AAED,cAAM,IAAI2C,KAAJ,CAAU,uCAAuCL,KAAjD,CAAN;AACH;;AAED,YAAM,IAAIK,KAAJ,CAAU,mCAAmC5C,MAA7C,CAAN;AACH;;AAED,WAAOA,MAAP;AACH;;AAvJc;;AA0JnB6C,MAAM,CAACC,OAAP,GAAiB3C,YAAjB","sourcesContent":["'use strict';\n\nconst vm = require('vm');\nconst { _, quote } = require('@genx/july');\n\nconst JsonConfigProvider = require('./JsonConfigProvider.js');\nconst EnvAwareConfigProviderF = require('./EnvAwareConfigProviderF.js');\nconst EnvAwareJsonConfigProvider = EnvAwareConfigProviderF(\n    '.json',\n    JsonConfigProvider\n);\n\nconst JS_VALUE_TOKEN = 'jsv';\nconst JS_TEMPLATE_TOKEN = 'jst';\nconst PROCESSOR_PREFIX = '#!';\n\nconst PrefixMap = new Map();\nPrefixMap.set(JS_VALUE_TOKEN, (strVal, variables) =>\n    vm.runInNewContext('() => (' + strVal + ')', variables)()\n);\nPrefixMap.set(JS_TEMPLATE_TOKEN, (strVal, variables) =>\n    vm.runInNewContext(quote(strVal, '`'), variables)\n);\n\nclass ConfigLoader {\n    /**\n     * Create an environment aware JSON config loader\n     * @param {string} configDir\n     * @param {string} baseName\n     * @param {string} envFlag\n     */\n    static createEnvAwareJsonLoader(configDir, baseName, envFlag, logger) {\n        return new ConfigLoader(\n            new EnvAwareJsonConfigProvider(configDir, baseName, envFlag),\n            logger\n        );\n    }\n\n    /**\n     * The config loader\n     * @constructs ConfigLoader\n     * @extends EventEmitter\n     * @example\n     *   let fileSource = new JsonConfigProvider('path/to/config.json');\n     *   let config = new ConfigLoader(fileSource);\n     *   await config.load_()...;\n     *\n     *   let dbSource = new DbConfigProvider(config.data.dbConnection);\n     *   config.provider = dbSource;\n     *   await config.reload_()...;\n     *\n     *   // same as: let envAwareLoader = new ConfigLoader(\n     *   //    new (EnvAwareConfigProviderF('.json', JsonConfigProvider, 'default'))('config/dir', 'app', 'production')\n     *   // );\n     *   let envAwareLoader = ConfigLoader.createEnvAwareJsonLoader('config/dir', 'app', 'production');\n     *\n     *   // Loader will load config/dir/app.default.json first,\n     *   // and then load config/dir/app.production.json,\n     *   // and finally override the default.\n     *   let cfg = await envAwareLoader.load_();\n     */\n    constructor(configProvider, logger) {\n        /**\n         * The config data source provider\n         * @type {object}\n         * @public\n         **/\n        this.provider = configProvider;\n\n        /**\n         * The config data\n         * @type {object}\n         * @public\n         **/\n        this.data = undefined;\n\n        /**\n         * Whether to do string post process automatically after loading\n         * @type {boolean}\n         * @public\n         */\n        this.autoPostProcess = true;\n\n        /**\n         * Logger with log(level, message, meta) function.\n         * @type {Logger}\n         * @public\n         */\n        this.logger = logger;\n    }\n\n    /**\n     * Start loading the config files and override existing\n     * @param {object} variables - variables\n     * @returns {Promise.<object>}\n     */\n    async load_(variables) {\n        let oldData = this.data;\n\n        await this.reload_(variables);\n\n        if (oldData) {\n            this.data = _.defaults(this.data, oldData);\n        }\n\n        return this.data;\n    }\n\n    /**\n     * Reload config\n     * @returns {Promise.<object>}\n     */\n    async reload_(variables) {\n        this.data = await this.provider.load_(this.logger);\n        if (this.autoPostProcess) this.postProcess(variables);\n\n        return this.data;\n    }\n\n    /**\n     * PostProcess the loaded config\n     * @param {object} variables - variables\n     */\n    postProcess(variables) {\n        let queue = [this.data];\n\n        variables = { ...variables, $this: this.data };\n\n        let interpolateElement = (coll, key, val) => {\n            if (typeof val === 'string') {\n                coll[key] = this._tryProcessStringValue(val, variables);\n            } else if (_.isPlainObject(val) || _.isArray(val)) {\n                queue.push(val);\n            }\n        };\n\n        let offset = 0;\n\n        while (queue.length > offset) {\n            let node = queue[offset];\n\n            if (_.isPlainObject(node)) {\n                for (let key in node) {\n                    if (node.hasOwnProperty(key)) {\n                        interpolateElement(node, key, node[key]);\n                    }\n                }\n            } else {\n                let l = node.length;\n                for (let i = 0; i < l; i++) {\n                    interpolateElement(node, i, node[i]);\n                }\n            }\n\n            offset++;\n        }\n    }\n\n    _tryProcessStringValue(strVal, variables) {\n        if (strVal.startsWith(PROCESSOR_PREFIX)) {\n            let colon = strVal.indexOf(':');\n            if (colon > 2) {\n                let token = strVal.substring(2, colon);\n                let operator = PrefixMap.get(token);\n                if (operator) {\n                    return operator(strVal.substr(colon + 1), variables);\n                }\n\n                throw new Error('Unsupported interpolation method: ' + token);\n            }\n\n            throw new Error('Invalid interpolation syntax: ' + strVal);\n        }\n\n        return strVal;\n    }\n}\n\nmodule.exports = ConfigLoader;\n"],"file":"ConfigLoader.js"}