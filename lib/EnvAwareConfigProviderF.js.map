{"version":3,"sources":["../src/EnvAwareConfigProviderF.js"],"names":["path","require","_","EnvAwareConfigProviderF","EXT","PROVIDER","DEFAULT_FLAG","constructor","configDir","baseName","envFlag","_defConfigProvider","join","_envConfigProvider","_envFlag","config","undefined","load_","logger","defConfig","envConfig","defaults","isEmpty","log","save_","setItem","key","value","set","getItem","defaultValue","get","module","exports"],"mappings":"AAAA;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAQD,OAAO,CAAC,YAAD,CAArB;;AAQA,MAAME,uBAAuB,GAAG,CAACC,GAAD,EAAMC,QAAN,EAAgBC,YAAY,GAAG,SAA/B,KAC5B,MAAM;AAQFC,EAAAA,WAAW,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,OAAO,GAAG,aAAhC,EAA+C;AAMtD,SAAKC,kBAAL,GAA0B,IAAIN,QAAJ,CACtBL,IAAI,CAACY,IAAL,CAAUJ,SAAV,EAAqBC,QAAQ,GAAG,GAAX,GAAiBH,YAAjB,GAAgCF,GAArD,CADsB,CAA1B;AASA,SAAKS,kBAAL,GAA0B,IAAIR,QAAJ,CACtBL,IAAI,CAACY,IAAL,CAAUJ,SAAV,EAAqBC,QAAQ,GAAG,GAAX,GAAiBC,OAAjB,GAA2BN,GAAhD,CADsB,CAA1B;AAIA,SAAKU,QAAL,GAAgBJ,OAAhB;AAOA,SAAKK,MAAL,GAAcC,SAAd;AACH;;AAOU,QAALC,KAAK,CAACC,MAAD,EAAS;AAChB,QAAIC,SAAS,GAAG,MAAM,KAAKR,kBAAL,CAAwBM,KAAxB,CAA8BC,MAA9B,CAAtB;AACA,QAAIE,SAAS,GAAG,MAAM,KAAKP,kBAAL,CAAwBI,KAAxB,CAA8BC,MAA9B,CAAtB;AAEA,SAAKH,MAAL,GAAcb,CAAC,CAACmB,QAAF,CAAW,EAAX,EAAeD,SAAf,EAA0BD,SAA1B,CAAd;;AACA,QAAID,MAAM,IAAI,CAAChB,CAAC,CAACoB,OAAF,CAAUF,SAAV,CAAf,EAAqC;AACjCF,MAAAA,MAAM,CAACK,GAAP,CACI,MADJ,EAEK,2DAA0D,KAAKT,QAAS,aAF7E;AAIH;;AAED,WAAO,KAAKC,MAAZ;AACH;;AAOU,QAALS,KAAK,GAAG;AACV,UAAM,KAAKX,kBAAL,CAAwBW,KAAxB,EAAN;AACH;;AASDC,EAAAA,OAAO,CAACC,GAAD,EAAMC,KAAN,EAAa;AAChBzB,IAAAA,CAAC,CAAC0B,GAAF,CAAM,KAAKb,MAAX,EAAmBW,GAAnB,EAAwBC,KAAxB;;AACA,SAAKd,kBAAL,CAAwBY,OAAxB,CAAgCC,GAAhC,EAAqCC,KAArC;;AACA,WAAO,IAAP;AACH;;AASDE,EAAAA,OAAO,CAACH,GAAD,EAAMI,YAAN,EAAoB;AACvB,WAAO5B,CAAC,CAAC6B,GAAF,CAAM,KAAKhB,MAAX,EAAmBW,GAAnB,EAAwBI,YAAxB,CAAP;AACH;;AAxFC,CADV;;AA4FAE,MAAM,CAACC,OAAP,GAAiB9B,uBAAjB","sourcesContent":["'use strict';\n\nconst path = require('path');\nconst { _ } = require('@genx/july');\n\n/**\n * Environment-aware config provider factory\n * @param {string} EXT - File extension name, e.g. \".json\"\n * @param {class} PROVIDER - Config provider class\n * @param {string} [DEFAULT_FLAG=\"default\"] - Default flag\n */\nconst EnvAwareConfigProviderF = (EXT, PROVIDER, DEFAULT_FLAG = 'default') =>\n    class {\n        /**\n         * Environment-aware config provider\n         * @constructs EnvAwareConfigProvider\n         * @param {string} configDir - The base directory of config files\n         * @param {string} baseName - The basename of the config file\n         * @param {string} [envFlag=\"development\"] - Environment flag\n         */\n        constructor(configDir, baseName, envFlag = 'development') {\n            /**\n             * The raw default config\n             * @type {object}\n             * @private\n             */\n            this._defConfigProvider = new PROVIDER(\n                path.join(configDir, baseName + '.' + DEFAULT_FLAG + EXT)\n            );\n\n            /**\n             * The environment specific config\n             * @type {object}\n             * @public\n             */\n            this._envConfigProvider = new PROVIDER(\n                path.join(configDir, baseName + '.' + envFlag + EXT)\n            );\n\n            this._envFlag = envFlag;\n\n            /**\n             * The loaded config\n             * @type {object}\n             * @public\n             */\n            this.config = undefined;\n        }\n\n        /**\n         * Start loading the config files\n         * @memberof EnvAwareConfigProvider\n         * @returns {Promise.<object>}\n         */\n        async load_(logger) {\n            let defConfig = await this._defConfigProvider.load_(logger);\n            let envConfig = await this._envConfigProvider.load_(logger);\n\n            this.config = _.defaults({}, envConfig, defConfig);\n            if (logger && !_.isEmpty(envConfig)) {\n                logger.log(\n                    'info',\n                    `Configuration is overrided by environment-specific [env=${this._envFlag}] settings.`\n                );\n            }\n\n            return this.config;\n        }\n\n        /**\n         * Start saving the config to files\n         * @memberof EnvAwareConfigProvider\n         * @returns {Promise.<*>}\n         */\n        async save_() {\n            await this._envConfigProvider.save_();\n        }\n\n        /**\n         * Update config item by dotted path.\n         * @memberof EnvAwareConfigProvider\n         * @param {string} key - The path of config item, e.g. \"item.subItem.key\" refers to { item: { subItem: { key: \"*\" } } }\n         * @param {*} value - New value of config item\n         * @returns {JsonConfigProvider}\n         */\n        setItem(key, value) {\n            _.set(this.config, key, value);\n            this._envConfigProvider.setItem(key, value);\n            return this;\n        }\n\n        /**\n         * Get config item by dotted path.\n         * @memberof EnvAwareConfigProvider\n         * @param {string} key\n         * @param {*} defaultValue\n         * @returns {*}\n         */\n        getItem(key, defaultValue) {\n            return _.get(this.config, key, defaultValue);\n        }\n    };\n\nmodule.exports = EnvAwareConfigProviderF;\n"],"file":"EnvAwareConfigProviderF.js"}