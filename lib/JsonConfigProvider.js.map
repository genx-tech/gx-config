{"version":3,"sources":["../src/JsonConfigProvider.js"],"names":["_","require","fs","JsonConfigProvider","constructor","filePath","config","undefined","load_","logger","pathExists","readJson","log","save_","outputJson","spaces","setItem","key","value","set","getItem","defaultValue","get","module","exports"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAQC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAASD,OAAO,CAAC,WAAD,CAAtB;;AAEA,MAAME,kBAAN,CAAyB;AAMrBC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AAOA,SAAKC,MAAL,GAAcC,SAAd;AACH;;AAMU,QAALC,KAAK,CAACC,MAAD,EAAS;AAChB,QAAI,MAAMP,EAAE,CAACQ,UAAH,CAAc,KAAKL,QAAnB,CAAV,EAAwC;AACpC,WAAKC,MAAL,GAAc,MAAMJ,EAAE,CAACS,QAAH,CAAY,KAAKN,QAAjB,CAApB;;AACA,UAAII,MAAJ,EAAY;AACRA,QAAAA,MAAM,CAACG,GAAP,CACI,MADJ,EAEK,iCAAgC,KAAKP,QAAS,GAFnD;AAIH;AACJ,KARD,MAQO;AACH,WAAKC,MAAL,GAAc,EAAd;AACH;;AAED,WAAO,KAAKA,MAAZ;AACH;;AAMU,QAALO,KAAK,GAAG;AACV,UAAMX,EAAE,CAACY,UAAH,CAAc,KAAKT,QAAnB,EAA6B,KAAKC,MAAlC,EAA0C;AAAES,MAAAA,MAAM,EAAE;AAAV,KAA1C,CAAN;AACH;;AAQDC,EAAAA,OAAO,CAACC,GAAD,EAAMC,KAAN,EAAa;AAChBlB,IAAAA,CAAC,CAACmB,GAAF,CAAM,KAAKb,MAAX,EAAmBW,GAAnB,EAAwBC,KAAxB;;AACA,WAAO,IAAP;AACH;;AAQDE,EAAAA,OAAO,CAACH,GAAD,EAAMI,YAAN,EAAoB;AACvB,WAAOrB,CAAC,CAACsB,GAAF,CAAM,KAAKhB,MAAX,EAAmBW,GAAnB,EAAwBI,YAAxB,CAAP;AACH;;AAhEoB;;AAmEzBE,MAAM,CAACC,OAAP,GAAiBrB,kBAAjB","sourcesContent":["'use strict';\n\nconst { _ } = require('@genx/july');\nconst { fs } = require('@genx/sys');\n\nclass JsonConfigProvider {\n    /**\n     * JSON file config data source\n     * @constructs JsonConfigProvider\n     * @param {string} filePath - The path of config file\n     */\n    constructor(filePath) {\n        this.filePath = filePath;\n\n        /**\n         * The loaded config\n         * @type {object}\n         * @public\n         */\n        this.config = undefined;\n    }\n\n    /**\n     * Start loading the config files\n     * @returns {Promise.<object>}\n     */\n    async load_(logger) {\n        if (await fs.pathExists(this.filePath)) {\n            this.config = await fs.readJson(this.filePath);\n            if (logger) {\n                logger.log(\n                    'info',\n                    `Configuration is loaded from \"${this.filePath}\"`\n                );\n            }\n        } else {\n            this.config = {};\n        }\n\n        return this.config;\n    }\n\n    /**\n     * Start saving the config to files\n     * @returns {Promise.<*>}\n     */\n    async save_() {\n        await fs.outputJson(this.filePath, this.config, { spaces: 4 });\n    }\n\n    /**\n     * Update config item by dotted path.\n     * @param {string} key - The path of config item, e.g. \"item.subItem.key\" refers to { item: { subItem: { key: \"*\" } } }\n     * @param {*} value - New value of config item\n     * @returns {JsonConfigProvider}\n     */\n    setItem(key, value) {\n        _.set(this.config, key, value);\n        return this;\n    }\n\n    /**\n     * Get config item by dotted path.\n     * @param {string} key\n     * @param {*} defaultValue\n     * @returns {*}\n     */\n    getItem(key, defaultValue) {\n        return _.get(this.config, key, defaultValue);\n    }\n}\n\nmodule.exports = JsonConfigProvider;\n"],"file":"JsonConfigProvider.js"}